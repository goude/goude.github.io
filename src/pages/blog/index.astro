---
import BaseLayout from "../../layouts/BaseLayout.astro";

type MarkdownPost = {
  frontmatter: { title: string; publishDate: string; [key: string]: any };
  Content?: any;
  file: string;
  rawContent?: () => string;
};

const title = "Blog";
const description = "Latest articles.";
const permalink = `${Astro.site!.href}blog`;

const modules = import.meta.glob("../../data/blog-posts/*.md");
let allPosts: MarkdownPost[] = await Promise.all(
  Object.entries(modules).map(async ([file, resolver]) => {
    const post = (await resolver()) as MarkdownPost;
    post.file = file;
    return post;
  }),
);

allPosts = allPosts.sort(
  (a: MarkdownPost, b: MarkdownPost) =>
    new Date(b.frontmatter.publishDate).valueOf() -
    new Date(a.frontmatter.publishDate).valueOf(),
);
---

<BaseLayout
  title={title}
  description={description}
  permalink={permalink}
  current="blog"
>
  <div class="container">
    <h1>Blog</h1>
    {
      allPosts.map((post: MarkdownPost, index: number) => {
        const href = `/blog/${post.file.split("/").pop()!.split(".").shift()}`;
        return (
          <div>
            {index !== 0 && <hr />}
            <div class="post-item">
              <h2>
                <a href={href}>{post.frontmatter.title}</a>
              </h2>
              <p>{post.frontmatter.description}</p>
              <div class="post-item-footer">
                <span class="post-item-date">
                  â€”{" "}
                  {
                    new Date(post.frontmatter.publishDate)
                      .toISOString()
                      .split("T")[0]
                  }
                </span>
              </div>
            </div>
          </div>
        );
      })
    }
  </div>
</BaseLayout>

<style>
  h2,
  .post-item-footer {
    font-family: var(--font-family-sans);
    font-weight: 700;
  }
  .post-item-date {
    color: var(--text-secondary);
    text-align: left;
    text-transform: uppercase;
    margin-right: 16px;
  }
  hr {
    margin: 60px auto;
  }
</style>
