---
import BaseLayout from "../layouts/BaseLayout.astro";

const title = "Multiplication Practice";
const description = "Practice multiplication up to 12 × 12";
const permalink = Astro.site?.href ?? "https://goude.se/multiplication";
---

<BaseLayout
  title={title}
  description={description}
  permalink={permalink}
  current="multiplication"
>
  <h1>Multiplication Practice</h1>

  <p class="subtitle">Practice your times tables up to 12 × 12</p>

  <div id="quiz-container">
    <div id="display">
      <div id="progress"></div>
      <div id="problem"></div>
      <div id="answer-input"></div>
      <div id="feedback"></div>
    </div>
    
    <div id="numpad">
      <button type="button" data-num="7">7</button>
      <button type="button" data-num="8">8</button>
      <button type="button" data-num="9">9</button>
      <button type="button" data-num="4">4</button>
      <button type="button" data-num="5">5</button>
      <button type="button" data-num="6">6</button>
      <button type="button" data-num="1">1</button>
      <button type="button" data-num="2">2</button>
      <button type="button" data-num="3">3</button>
      <button type="button" data-num="0" class="zero">0</button>
      <button type="button" id="backspace">⌫</button>
      <button type="button" id="enter" class="enter">↵</button>
    </div>

    <div id="completion"></div>
  </div>

  <style>
    .subtitle {
      font-family: "Georgia", serif;
      font-size: 1.2em;
      margin: 1em 0;
    }

    #quiz-container {
      margin: 2em 0;
      max-width: 400px;
    }

    #display {
      background: #f5f5f5;
      border: 2px solid #ccc;
      border-radius: 8px;
      padding: 1.5em;
      margin-bottom: 1em;
      min-height: 180px;
      display: flex;
      flex-direction: column;
      justify-content: space-between;
    }

    #progress {
      font-size: 0.9em;
      color: #666;
      text-align: right;
    }

    #problem {
      font-size: 2.5em;
      text-align: center;
      margin: 0.5em 0;
      min-height: 1.2em;
    }

    #answer-input {
      font-size: 1.8em;
      text-align: center;
      min-height: 1.2em;
      padding: 0.3em;
      color: #000;
    }

    #feedback {
      text-align: center;
      min-height: 1.5em;
      font-size: 1.2em;
      margin-top: 0.5em;
    }

    .correct {
      color: #2d5016;
    }

    .incorrect {
      color: #8b0000;
    }

    #numpad {
      display: grid;
      grid-template-columns: repeat(3, 1fr);
      gap: 8px;
      max-width: 300px;
    }

    #numpad button {
      font-size: 1.5em;
      padding: 0.8em;
      border: 1px solid #ccc;
      background: #fff;
      border-radius: 4px;
      cursor: pointer;
      user-select: none;
      -webkit-user-select: none;
      -webkit-tap-highlight-color: transparent;
    }

    #numpad button:active {
      background: #e0e0e0;
    }

    #numpad .zero {
      grid-column: span 1;
    }

    #numpad #backspace,
    #numpad #enter {
      font-size: 1.3em;
    }

    #numpad #enter {
      background: #4a90e2;
      color: white;
      border-color: #4a90e2;
    }

    #numpad #enter:active {
      background: #357abd;
    }

    #completion {
      margin-top: 2em;
      font-size: 1.3em;
      font-weight: bold;
    }

    .hidden {
      display: none;
    }
  </style>

  <script>
    type Problem = {
      a: number;
      b: number;
      answer: number;
      key: string;
    };

    class MultiplicationQuiz {
      private allProblems: Problem[] = [];
      private solvedKeys: Set<string> = new Set();
      private retryQueue: Problem[] = [];
      private currentProblem: Problem | null = null;
      private problemsSinceRetry = 0;
      private totalProblems = 0;
      private isProcessing = false;

      constructor() {
        this.initializeProblems();
        this.setupEventListeners();
        this.generateNewProblem();
        this.updateProgress();
      }

      private initializeProblems() {
        for (let a = 2; a <= 12; a++) {
          for (let b = a; b <= 12; b++) {
            const key = this.getProblemKey(a, b);
            this.allProblems.push({ a, b, answer: a * b, key });
          }
        }
        this.totalProblems = this.allProblems.length;
        this.shuffleArray(this.allProblems);
      }

      private shuffleArray<T>(array: T[]) {
        for (let i = array.length - 1; i > 0; i--) {
          const j = Math.floor(Math.random() * (i + 1));
          [array[i], array[j]] = [array[j], array[i]];
        }
      }

      private getProblemKey(a: number, b: number): string {
        return a <= b ? `${a}×${b}` : `${b}×${a}`;
      }

      private setupEventListeners() {
        // Physical keyboard support
        document.addEventListener('keydown', (e) => {
          if (this.isProcessing) return;
          
          if (e.key >= '0' && e.key <= '9') {
            this.addDigit(e.key);
          } else if (e.key === 'Backspace') {
            this.backspace();
          } else if (e.key === 'Enter') {
            this.checkAnswer();
          }
        });

        // Number buttons
        document.querySelectorAll('[data-num]').forEach(btn => {
          btn.addEventListener('click', () => {
            const num = (btn as HTMLElement).dataset.num!;
            this.addDigit(num);
          });
        });

        // Backspace button
        document.getElementById('backspace')!.addEventListener('click', () => {
          this.backspace();
        });

        // Enter button
        document.getElementById('enter')!.addEventListener('click', () => {
          this.checkAnswer();
        });
      }

      private addDigit(digit: string) {
        const input = document.getElementById('answer-input') as HTMLDivElement;
        if (input.textContent!.length < 4) {
          input.textContent += digit;
        }
      }

      private backspace() {
        const input = document.getElementById('answer-input') as HTMLDivElement;
        input.textContent = input.textContent!.slice(0, -1);
      }

      private updateProgress() {
        const progressDiv = document.getElementById('progress') as HTMLDivElement;
        progressDiv.textContent = `${this.solvedKeys.size} / ${this.totalProblems}`;
      }

      private generateNewProblem() {
        const input = document.getElementById('answer-input') as HTMLDivElement;
        const problemDiv = document.getElementById('problem') as HTMLDivElement;
        const feedbackDiv = document.getElementById('feedback') as HTMLDivElement;

        this.isProcessing = false;
        input.textContent = '';
        feedbackDiv.textContent = '';
        feedbackDiv.className = '';

        if (this.retryQueue.length > 0 && this.problemsSinceRetry >= this.getRandomDelay()) {
          this.currentProblem = this.retryQueue.shift()!;
          this.problemsSinceRetry = 0;
        } else if (this.allProblems.length > 0) {
          this.currentProblem = this.allProblems.shift()!;
        } else if (this.retryQueue.length > 0) {
          this.currentProblem = this.retryQueue.shift()!;
        } else {
          this.showCompletion();
          return;
        }

        if (Math.random() > 0.5 && this.currentProblem.a !== this.currentProblem.b) {
          [this.currentProblem.a, this.currentProblem.b] = 
            [this.currentProblem.b, this.currentProblem.a];
        }

        problemDiv.textContent = `${this.currentProblem.a} × ${this.currentProblem.b}`;
      }

      private getRandomDelay(): number {
        return Math.floor(Math.random() * 3) + 2;
      }

      private checkAnswer() {
        if (this.isProcessing) return;
        
        const input = document.getElementById('answer-input') as HTMLDivElement;
        const feedbackDiv = document.getElementById('feedback') as HTMLDivElement;
        const answerText = input.textContent || '';
        const userAnswer = parseInt(answerText, 10);

        if (!answerText || isNaN(userAnswer)) return;

        this.isProcessing = true;

        if (userAnswer === this.currentProblem!.answer) {
          feedbackDiv.textContent = '✓';
          feedbackDiv.className = 'correct';
          this.solvedKeys.add(this.currentProblem!.key);
          this.problemsSinceRetry++;
          this.updateProgress();
          setTimeout(() => this.generateNewProblem(), 600);
        } else {
          feedbackDiv.textContent = `✗ ${this.currentProblem!.answer}`;
          feedbackDiv.className = 'incorrect';
          this.retryQueue.push(this.currentProblem!);
          setTimeout(() => this.generateNewProblem(), 1200);
        }
      }

      private showCompletion() {
        const display = document.getElementById('display') as HTMLDivElement;
        const numpad = document.getElementById('numpad') as HTMLDivElement;
        const completionDiv = document.getElementById('completion') as HTMLDivElement;

        display.classList.add('hidden');
        numpad.classList.add('hidden');
        completionDiv.textContent = '✓ All problems completed!';
        completionDiv.className = 'correct';
      }
    }

    new MultiplicationQuiz();
  </script>
</BaseLayout>