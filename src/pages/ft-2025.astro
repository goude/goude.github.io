<!doctype html>
<html lang="sv">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Nedräkning till FT 2025</title>
    <style>
      @import url("https://fonts.googleapis.com/css2?family=Vollkorn:wght@600&family=EB+Garamond:wght@700&display=swap");

      body {
        font-family: "EB Garamond", serif;
        text-align: center;
        background: radial-gradient(circle at top, #0d1b42, #020b26);
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        height: 100vh;
        margin: 0;
        color: gold;
        text-shadow: 2px 2px 4px rgba(255, 215, 0, 0.5);
        position: relative;
      }

      .background-svg {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: url("assets/blhj_logo.svg") no-repeat center center;
        background-size: contain;
        opacity: 1;
        filter: brightness(2) sepia(1) hue-rotate(40deg) saturate(5);
        z-index: -1;
      }

      h1 {
        font-size: 2em;
        font-family: "Vollkorn", serif;
        margin-bottom: 10px;
      }

      #countdown {
        font-size: 1.8em;
        font-weight: bold;
        letter-spacing: 1px;
        padding: 10px;
        border-radius: 5px;
        animation: glow 1.5s infinite alternate;
      }

      @keyframes glow {
        from {
          text-shadow: 0 0 5px rgba(255, 215, 0, 0.8);
        }
        to {
          text-shadow: 0 0 15px rgba(255, 215, 0, 1);
        }
      }

      .divider {
        width: 60%;
        height: 2px;
        background: gold;
        margin: 20px auto;
        opacity: 0.5;
        position: relative;
      }

      .divider::before,
      .divider::after {
        content: "⚜";
        position: absolute;
        top: -8px;
        font-size: 1.2em;
        color: gold;
      }

      .divider::before {
        left: -20px;
      }

      .divider::after {
        right: -20px;
      }

      #adage {
        opacity: 0;
        transition: opacity 2s ease-in-out;
      }

      .fade-in {
        opacity: 1 !important;
      }
    </style>
  </head>
  <body>
    <div class="background-svg"></div>

    <h1>Nu är det bara</h1>
    <div class="divider"></div>
    <div id="countdown">Laddar...</div>
    <div class="divider"></div>
    <p>kvar till Feldttåget 2025!</p>
    <p id="adage">Loading...</p>

    <script>
      async function fetchRandomAdage() {
        const githubApiUrl =
          "https://api.github.com/repos/goude/adages/contents/adages";
        const rawContentBaseUrl =
          "https://raw.githubusercontent.com/goude/adages/master/adages/";

        try {
          const allowedFileNames = ["ft"];
          const listResponse = await fetch(githubApiUrl);
          const fileList = await listResponse.json();
          const filteredFileList = fileList.filter((file) =>
            allowedFileNames.includes(file.name),
          );
          const randomFileName =
            filteredFileList[
              Math.floor(Math.random() * filteredFileList.length)
            ].name;

          const fileUrl = `${rawContentBaseUrl}${randomFileName}`;
          const fileResponse = await fetch(fileUrl);
          const fileContent = await fileResponse.text();

          const adages = fileContent.split("%");
          const randomAdage =
            adages[Math.floor(Math.random() * adages.length)].trim();

          const match = randomAdage.match(/^(.*?)(?:\s*–\s*(.*))?$/);
          const adage = match ? match[1].trim() : randomAdage;
          const attribution = match && match[2] ? match[2].trim() : null;

          const formattedAdage = adage.replace(/\n/g, "<br>");
          const adageElement = document.getElementById("adage");
          adageElement.innerHTML = attribution
            ? `${formattedAdage}<br><i>— ${attribution}</i>`
            : formattedAdage;
          adageElement.classList.add("fade-in");
        } catch (error) {
          console.error("Error fetching adage:", error);
          document.getElementById("adage").textContent = "Inte bara jag.";
        }
      }

      fetchRandomAdage();

      function updateCountdown() {
        const targetDate = new Date("2025-05-23T14:00:00Z");
        const now = new Date();
        const diff = targetDate - now;

        if (diff <= 0) {
          document.getElementById("countdown").innerHTML = "Det är dags!";
          return;
        }

        const days = Math.floor(diff / (1000 * 60 * 60 * 24));
        const hours = Math.floor(
          (diff % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60),
        );
        const minutes = Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60));
        const seconds = Math.floor((diff % (1000 * 60)) / 1000);

        document.getElementById("countdown").innerHTML =
          `${days} dagar ${hours} timmar ${minutes} minuter & ${seconds} sekunder`;
      }

      updateCountdown();
      setInterval(updateCountdown, 1000);
    </script>
  </body>
</html>
