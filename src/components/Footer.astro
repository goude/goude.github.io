---
import pkg from "../../package.json";

const now = new Date();

/**
 * ISO week number (Swedish practice via SS-ISO 8601-1) in LOCAL time.
 *
 * Definition (ISO 8601 / week-date):
 * - Weeks run Monday–Sunday.
 * - Week 1 is the week that contains the first Thursday of the year
 *   (equivalently: the week that contains 4 January).
 * - The "week-year" is the Gregorian year of that Thursday.
 *
 * Algorithm encoding that definition (local-time version):
 * 1) Convert the given date to the Thursday of its ISO week:
 *      d := date + (4 - dow), where dow is Monday=1 … Sunday=7
 *    In JS getDay(): Sunday=0, Monday=1, … Saturday=6, so we map Sunday (0) -> 7.
 * 2) Let yStart be 1 January of d.getFullYear() (the week-year).
 * 3) The week index is the number of 7-day blocks from yStart to d, with Week 1
 *    starting at the block that contains 4 January. In practice:
 *      week = ceil( ( (d - yStart)/86400000 + 1 ) / 7 )
 *
 * Notes:
 * - Using local date/time avoids off-by-one issues around midnight that can occur
 *   when using UTC methods for a Swedish (local) week number.
 * - If you need the ISO week-year too, compute:
 *      const weekYear = d.getFullYear(); // after shifting to Thursday
 */
const getISOWeek = (date: Date): number => {
  const d = new Date(date); // copy so we don't mutate caller
  const jsDow = d.getDay(); // 0=Sun,1=Mon,...,6=Sat (LOCAL)
  const isoDow = jsDow === 0 ? 7 : jsDow; // map Sunday->7 for ISO Monday=1..Sunday=7
  d.setDate(d.getDate() + (4 - isoDow)); // shift to the Thursday of this ISO week

  const yearStart = new Date(d.getFullYear(), 0, 1); // 1 Jan of the ISO week-year (LOCAL)
  const days = (d.getTime() - yearStart.getTime()) / 86400000;

  // Week number: count 7-day blocks from start of week-year; +1 to start at 1
  return Math.ceil((days + 1) / 7);
};

const pad = (n: number) => String(n).padStart(2, "0");

const week = getISOWeek(now);

// Keep BUILD_TIMESTAMP in local time for consistency with the week computation.
// __BUILD_TIMESTAMP__ should be injected by your bundler as a numeric epoch millis or ISO string.
const build = new Date(__BUILD_TIMESTAMP__ as unknown as number | string);
const buildParts = {
  date: `${build.getFullYear()}-${pad(build.getMonth() + 1)}-${pad(build.getDate())}`,
  time: `${pad(build.getHours())}:${pad(build.getMinutes())}`,
};

const nowParts = {
  date: `${now.getFullYear()}-${pad(now.getMonth() + 1)}-${pad(now.getDate())}`,
  time: `${pad(now.getHours())}:${pad(now.getMinutes())}`,
};

// Timezone offset display (+HH:MM / -HH:MM) in LOCAL time
const tzOffset = -now.getTimezoneOffset();
const sign = tzOffset >= 0 ? "+" : "-";
const tzH = pad(Math.floor(Math.abs(tzOffset) / 60));
const tzM = pad(Math.abs(tzOffset) % 60);
const tz = `${sign}${tzH}:${tzM}`;
---

<style>
  .faded {
    opacity: 0.2;
  }
  .clickable {
    cursor: pointer;
    text-decoration: underline dotted;
  }

  footer {
    font:
      14px/1.4 system-ui,
      -apple-system,
      Segoe UI,
      Roboto,
      "Helvetica Neue",
      Arial,
      "Noto Sans",
      "Apple Color Emoji",
      "Segoe UI Emoji";
    color: inherit;
  }
  footer a {
    color: inherit;
  }
</style>

<footer>
  © {now.getFullYear()}
  <a href="https://goude.se">goude.se</a> ·
  <a href="/rubiks" title="ISO week (Sweden: SS-ISO 8601-1)">Week {week}</a> ·
  <a href="/sitemap">v{pkg.version}</a> · Built {buildParts.date}<span
    class="faded">T</span
  >{buildParts.time} · ⊛
</footer>
